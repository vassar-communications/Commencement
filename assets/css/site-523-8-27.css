@charset "UTF-8";
/*	UTILITIES
	=========
	
	These provide useful functions for writing your own mixins. They're also used by mixins in Beltpack itself, so they should come first.
*/
/*
	As far as I can tell, there doesn't seem to be a function to get a key-value pair from a map based on index number. This might be clumsy, but it works: iterate across the map, incrementing a counter, until the counter matches the specified index, at which point you return the value.

*/
/*	FUNCTIONS
	========= */
/*	The following are by Hugo Giraudel
*/
/*	MIXINS
	====== */
/*	AESTHETIC
	=========

	These mixins handle aesthetic effects.
*/
/*	Animations
	========== */
/*	TYPOGRAPHIC
	===========
*/
/*	Debug
	=====

	This is a collection of tools and mixins that will help with development. I'm keeping it separate from the main mixins file because this is stuff that shouldn't get mixed up in the final site. Ensuring that this doesn't go live should be as simple as commenting out the debug @import.
*/
/*	Basics is for pervasive rules that should apply everywhere. These are more fundamental and generic than helpers - they apply to all layouts. This could be a single page, but I'm setting it up as a folder in case anyone would want to include stuff like reset/normalize stylesheets.
	
	Couple of ideas here from https://every-layout.dev/
*/
html {
  font-size: 1.2em;
  scroll-behavior: smooth;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 30em) {
    html {
      font-size: calc(1em + 0.5 * ((100vw - 20em) / 60)); } }
  @media screen and (min-width: 50em) {
    html {
      font-size: calc(0.8em + 0.5 * ((100vw - 20em) / 60)); } }
b {
  font-weight: unset; }

body {
  margin: 0; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

* {
  margin-top: 0; }

*:only-child,
*:first-child {
  margin-top: 0; }

img {
  width: 100%; }

@font-face {
  font-family: 'Source Sans Variable';
  font-weight: 200 900;
  font-style: normal;
  font-stretch: normal;
  src: url("../fonts/WOFF2/VAR/SourceSansVariable-Roman.ttf.woff2") format("woff2"), url("../fonts/WOFF/VAR/SourceSansVariable-Roman.ttf.woff") format("woff"), url("../fonts/VAR/SourceSansVariable-Roman.ttf") format("truetype"); }

@font-face {
  font-family: 'Source Sans Variable';
  font-weight: 200 900;
  font-style: italic;
  font-stretch: normal;
  src: url("../fonts/WOFF2/VAR/SourceSansVariable-Italic.ttf.woff2") format("woff2"), url("../fonts/WOFF/VAR/SourceSansVariable-Italic.ttf.woff") format("woff"), url("../fonts/VAR/SourceSansVariable-Italic.ttf") format("truetype"); }

.type-xsmall {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 360;
  line-height: 1.3;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .type-xsmall {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .type-xsmall {
      font-size: 0.8em; } }
.type-xsmall-bold {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 640;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .type-xsmall-bold {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .type-xsmall-bold {
      font-size: 0.8em; } }
.type-regular-bold {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.2em;
  letter-spacing: -0.04em;
  font-variation-settings: "wght" 600;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .type-regular-bold {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    .type-regular-bold {
      font-size: 1em; } }
.type-regular-condensed {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  line-height: 1.26;
  font-size: 1.2em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .type-regular-condensed {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    .type-regular-condensed {
      font-size: 1em; } }
.page-intro {
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 2em;
  font-weight: 300;
  letter-spacing: 0.02em;
  line-height: 1.1;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.section-intro {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 2em;
  font-variation-settings: "wght" 320;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

p {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.2em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    p {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    p {
      font-size: 1em; } }
li, td {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  line-height: 1.26;
  font-size: 1.2em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  margin-bottom: 0.4em; }
  @media screen and (min-width: 30em) {
    li, td {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    li, td {
      font-size: 1em; } }
.type-small {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .type-small {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .type-small {
      font-size: 0.9em; } }
.type-small-condensed {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.placeholder {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .placeholder {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .placeholder {
      font-size: 0.9em; } }
.intro {
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  letter-spacing: 0.02em;
  line-height: 1.1;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

h2 {
  font-family: freight-big-pro, serif;
  font-size: 3.4em;
  text-align: center;
  margin: 0;
  line-height: 0.9;
  padding-bottom: 0.4em;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 2.4em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    h2 {
      font-size: 3em; } }
  @media screen and (min-width: 50em) {
    h2 {
      font-size: 3.4em; } }
h3 {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  font-variation-settings: "wght" 600;
  letter-spacing: -0.03em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  margin-bottom: 0.2em; }

strong {
  font-variation-settings: 'wght' 660; }

.largetab > summary {
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 4em;
  font-style: italic;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.subtab summary {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  font-variation-settings: "wght" 320;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.note p {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .note p {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .note p {
      font-size: 0.9em; } }
.person-bio .media__title {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 640;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .person-bio .media__title {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .person-bio .media__title {
      font-size: 0.8em; } }
.person-bio .media__subtitle {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  line-height: 1.2;
  font-size: 1em;
  font-variation-settings: "wght" 360;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .person-bio .media__subtitle {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .person-bio .media__subtitle {
      font-size: 0.74em; } }
.person-bio img {
  border: 0.4em solid #fff; }

.person-bio .media__content p {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 360;
  line-height: 1.3;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .person-bio .media__content p {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .person-bio .media__content p {
      font-size: 0.8em; } }
.media--story-item .media__title {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.2em;
  letter-spacing: -0.04em;
  font-variation-settings: "wght" 600;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .media--story-item .media__title {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    .media--story-item .media__title {
      font-size: 1em; } }
.media--story-item .media__content p {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  line-height: 1.26;
  font-size: 1.2em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .media--story-item .media__content p {
      font-size: 1.1em; } }
  @media screen and (min-width: 50em) {
    .media--story-item .media__content p {
      font-size: 1em; } }
.tile__title {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 360;
  line-height: 1.3;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .tile__title {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .tile__title {
      font-size: 0.8em; } }
.vb-title {
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  font-weight: bold;
  letter-spacing: 0.02em;
  line-height: 1.1;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.vb-caption {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .vb-caption {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .vb-caption {
      font-size: 0.9em; } }
  .vb-caption p {
    font-size: 1em; }

.text-center {
  text-align: center; }

.margin-0 {
  margin: 0; }

.breakout,
.width-fullscreen {
  left: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  max-width: none;
  right: 50%;
  position: relative;
  width: 100vw; }

/* */
.media.person-bio {
  grid-row-gap: 0.2em;
  margin-bottom: 1em;
  padding-bottom: 1em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .media.person-bio {
      margin-bottom: 0; } }
  .media.person-bio .media__figure {
    width: 8em; }

.event-listing .link--video {
  font-variation-settings: 'wght' 400;
  margin-left: 1.9em;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 0.8em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .event-listing .link--video {
      font-size: 0.8em; } }
  @media screen and (min-width: 50em) {
    .event-listing .link--video {
      font-size: 0.9em; } }
  .event-listing .link--video:before {
    width: 1.4em;
    height: 1.4em;
    top: 0;
    left: -1.8em;
    margin-left: 0 !important; }

.event-listing .event-video {
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  text-align: left;
  margin-top: 0.4em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .event-listing .event-video {
      text-align: left;
      margin-top: 0.4em; } }
  @media screen and (min-width: 50em) {
    .event-listing .event-video {
      text-align: right;
      margin-top: 0; } }
.event-listing .event-title {
  font-size: 1em;
  line-height: 1.2;
  margin: 0; }

.event-listing .event-time {
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  text-align: left;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .event-listing .event-time {
      text-align: left; } }
  @media screen and (min-width: 50em) {
    .event-listing .event-time {
      text-align: center; } }
.event-listing .event-link {
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  text-align: left;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .event-listing .event-link {
      text-align: left; } }
  @media screen and (min-width: 50em) {
    .event-listing .event-link {
      text-align: right; } }
.event-listing .event-item {
  border-bottom: 1px solid #aaa;
  padding: 0.4em 0;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  grid-template-columns: 1fr;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 50em) {
    .event-listing .event-item {
      display: grid;
      grid-gap: 1em; } }
  @media screen and (min-width: 30em) {
    .event-listing .event-item {
      grid-template-columns: 1fr; } }
  @media screen and (min-width: 50em) {
    .event-listing .event-item {
      grid-template-columns: 1fr 1fr; } }
  .event-listing .event-item p {
    margin: 0; }

.note {
  padding: 1.2em; }
  .note p {
    margin-top: 0; }
    .note p:last-child, .note p:only-child {
      margin-bottom: 0; }

.page-intro {
  padding-left: calc((100vw - 20em)/2);
  padding-right: calc((100vw - 20em)/2); }
  @media screen and (min-width: 50em) {
    .page-intro {
      width: 100vw;
      position: relative;
      left: 50%;
      right: 50%;
      margin-left: -50vw;
      margin-right: -50vw;
      max-width: none; } }
.media--story-item {
  grid-row-gap: 0.2em !important;
  margin-bottom: 1em;
  max-width: 50em;
  padding-bottom: 1em;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2); }
  .media--story-item .media__header {
    margin-bottom: 0; }
  .media--story-item .media__figure {
    max-width: 18em; }

table {
  width: 100%; }
  table td {
    display: block;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      table td {
        display: table-cell; } }
.u-Video {
  position: relative;
  padding-bottom: 56.25%;
  /* 16:9 */
  height: 0; }

.u-Video iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; }

.bio-listing {
  grid-column-gap: 3.4em !important;
  grid-row-gap: 1em !important; }

.cols-3-lg {
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 2em; }

.grid {
  display: grid; }

.media {
  overflow: hidden;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  .media .media__figure {
    float: left;
    margin-right: 1em;
    width: 50%;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .media .media__figure {
        width: auto;
        margin-right: 0; } }
  @media screen and (min-width: 50em) {
    .media {
      display: grid;
      grid-gap: 1em;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: "media-figure media-title" "media-figure media-content";
      align-items: flex-start; } }
  .media .media__figure {
    grid-area: media-figure; }
  .media .media__title {
    margin: 0; }
  .media .media__header {
    grid-area: media-title;
    margin-bottom: 0.4em; }
    .media .media__header p {
      margin: 0; }
  .media .media__content {
    grid-area: media-content; }

.u-pageInner .PageContentInner {
  display: grid;
  grid-template-columns: 25% 75%;
  grid-template-rows: auto auto auto;
  grid-template-areas: "masthead nav-top" "nav-secondary content" "footer footer"; }

.u-pageInner .u-lHeader {
  align-items: center;
  display: flex;
  grid-area: masthead;
  justify-content: center;
  justify-content: left;
  padding-left: 1.8em; }

.u-pageInner .u-lContent {
  max-width: 34em; }

.u-pageInner .u-NavSite__main {
  grid-area: nav-top;
  line-height: 1.4;
  padding-right: 1.4em;
  text-align: right; }

.u-pageInner .u-NavSite__level--1 {
  float: right;
  width: 70%; }

.u-pageInner .u-NavSite__secondary {
  grid-area: nav-secondary; }
  .u-pageInner .u-NavSite__secondary .u-NavSite__level--2 {
    margin: 5em 4em 0 0;
    padding: 0; }
  .u-pageInner .u-NavSite__secondary li {
    list-style: none;
    margin: 0;
    padding: 0; }
    .u-pageInner .u-NavSite__secondary li a {
      text-decoration: none;
      padding-left: 1.4em; }

.u-pageInner .u-lMain {
  grid-area: content; }

.u-pageInner .u-lFooter {
  grid-area: footer; }

body {
  color: #444; }

a {
  transition: 0.4s all ease; }
  a:link {
    color: #951829; }
  a:visited {
    color: #641A2B; }
  a:hover, a:visited:hover, a:focus {
    color: #ed1c24; }
  a:active, a:visited:active {
    color: #ed1c24; }

.section h2.grad-lightburg-red {
  background: linear-gradient(45deg, #951829 0%, #ed1c24 100%);
  -webkit-background-clip: text;
  color: transparent; }

.section h2.grad-darkburg-red {
  background: linear-gradient(45deg, #641A2B 0%, #ed1c24 100%);
  -webkit-background-clip: text;
  color: transparent; }

.section h2:not(.no-border) {
  padding-bottom: 1em;
  position: relative; }
  .section h2:not(.no-border):before {
    bottom: 0.6em;
    border-top: 1px solid #f00;
    content: "";
    left: 30%;
    position: absolute;
    right: 30%; }

.section--fancylayout .section__header.has-border {
  margin-bottom: 2em;
  padding-bottom: 2em;
  border-bottom: 1px solid #fff; }

.section--bio-grid .media.person-bio {
  border-bottom: 1px solid #fff; }

.section--bio-grid.theme-pink .media__figure {
  background: #000; }

.section--bio-grid.theme-dark-burgundy .media__figure {
  background: #fff; }

.person-bio img {
  border: none !important; }

.note {
  border: 1px solid transparent;
  border-image-slice: 78 145 140 72;
  border-image-width: 10px 18px 20px 10px;
  border-image-outset: 0px 0px 6px 0px;
  border-image-outset: 0.2px 9px 10px 0.5px;
  border-image-repeat: stretch stretch;
  border-image-source: url(../images/border-box-gold.png); }

html:not(.wtff) {
  /* 
		FF can't handle fixed-position backgrounds if a filter is applied.
	*/ }
  html:not(.wtff) .section .bg-image-wrapper {
    will-change: transform; }
  html:not(.wtff) .section.section--bg-image .bg-image-wrapper {
    filter: grayscale(1) contrast(1.5); }
  html:not(.wtff) .section.section--cover-img.top-hits-topOfWindow {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      html:not(.wtff) .section.section--cover-img.top-hits-topOfWindow .bg-image-wrapper {
        filter: grayscale(1) contrast(1.5); } }
  html:not(.wtff) .section.section--cover-img.theme-gold.top-hits-topOfWindow {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      html:not(.wtff) .section.section--cover-img.theme-gold.top-hits-topOfWindow .bg-image-wrapper {
        filter: grayscale(1) contrast(2.5); } }
.bg-image-wrapper {
  background-size: cover;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .bg-image-wrapper {
      background-attachment: fixed; } }
.section.section--bg-image {
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  .section.section--bg-image .bg-image-wrapper {
    opacity: 0; }
  @media screen and (min-width: 50em) {
    .section.section--bg-image .bg-image-wrapper {
      opacity: 0.15; } }
.section.section--cover-img {
  background: #ea1b1b; }
  .section.section--cover-img.top-hits-topOfWindow {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section.section--cover-img.top-hits-topOfWindow .bg-image-wrapper {
        opacity: 0.1; } }
.section.theme-red {
  background: #ea1b1b;
  color: #fff; }
  .section.theme-red a:link {
    color: #fff; }
  .section.theme-red a:visited {
    color: #fff; }
  .section.theme-red a:hover, .section.theme-red a:visited:hover, .section.theme-red a:focus {
    color: #000; }
  .section.theme-red a:active, .section.theme-red a:visited:active {
    color: #000; }
  .section.theme-red.section--cover-img {
    background: #ea1b1b; }
    .section.theme-red.section--cover-img.top-hits-topOfWindow {
      /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
      @media screen and (min-width: 50em) {
        .section.theme-red.section--cover-img.top-hits-topOfWindow .bg-image-wrapper {
          opacity: 0.2; } }
.section.theme-gold {
  background: #c6aa76;
  color: #222; }
  .section.theme-gold a:link {
    color: #000; }
  .section.theme-gold a:visited {
    color: #000; }
  .section.theme-gold a:hover, .section.theme-gold a:visited:hover, .section.theme-gold a:focus {
    color: #fff; }
  .section.theme-gold a:active, .section.theme-gold a:visited:active {
    color: #fff; }
  .section.theme-gold.section--cover-img.top-hits-topOfWindow {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section.theme-gold.section--cover-img.top-hits-topOfWindow .bg-image-wrapper {
        opacity: 0.1; } }
.section.theme-light-burgundy {
  background: #951829;
  color: #fff8ef; }
  .section.theme-light-burgundy a:link {
    color: #fff; }
  .section.theme-light-burgundy a:visited {
    color: #fff; }
  .section.theme-light-burgundy a:hover, .section.theme-light-burgundy a:visited:hover, .section.theme-light-burgundy a:focus {
    color: #c6aa76; }
  .section.theme-light-burgundy a:active, .section.theme-light-burgundy a:visited:active {
    color: #c6aa76; }
  .section.theme-light-burgundy.section--cover-img.top-hits-topOfWindow {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section.theme-light-burgundy.section--cover-img.top-hits-topOfWindow .bg-image-wrapper {
        opacity: 0.2; } }
.section.theme-dark-burgundy {
  background: #641A2B; }
  .section.theme-dark-burgundy a:link {
    color: #c6aa76; }
  .section.theme-dark-burgundy a:visited {
    color: #c6aa76; }
  .section.theme-dark-burgundy a:hover, .section.theme-dark-burgundy a:visited:hover, .section.theme-dark-burgundy a:focus {
    color: #fff; }
  .section.theme-dark-burgundy a:active, .section.theme-dark-burgundy a:visited:active {
    color: #fff; }

.section.theme-pat-quad {
  position: relative; }
  .section.theme-pat-quad .section__inner {
    position: relative;
    z-index: 10; }
  .section.theme-pat-quad:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url(../images/pattern-quad-white.png);
    background-attachment: fixed;
    background-size: 2em;
    opacity: 0.06; }

.section.theme-light-gray {
  background: #d5d1cf;
  color: #fff8ef; }

.section.theme-cool-gray {
  background: #63666a;
  color: #fff8ef; }
  .section.theme-cool-gray a:link {
    color: #ed1c24; }
  .section.theme-cool-gray a:visited {
    color: #c6aa76; }
  .section.theme-cool-gray a:hover, .section.theme-cool-gray a:visited:hover, .section.theme-cool-gray a:focus {
    color: #fff; }
  .section.theme-cool-gray a:active, .section.theme-cool-gray a:visited:active {
    color: #fff; }

.section.theme-charcoal, .section.theme-charcoal-pat-quad {
  background: #222;
  color: #fff8ef; }
  .section.theme-charcoal a:link, .section.theme-charcoal-pat-quad a:link {
    color: #c6aa76; }
  .section.theme-charcoal a:visited, .section.theme-charcoal-pat-quad a:visited {
    color: #c6aa76; }
  .section.theme-charcoal a:hover, .section.theme-charcoal-pat-quad a:hover, .section.theme-charcoal a:visited:hover, .section.theme-charcoal a:focus, .section.theme-charcoal-pat-quad a:focus {
    color: #fff; }
  .section.theme-charcoal a:active, .section.theme-charcoal-pat-quad a:active, .section.theme-charcoal a:visited:active {
    color: #fff; }
  .section.theme-charcoal h2, .section.theme-charcoal-pat-quad h2 {
    color: #c6aa76; }
  .section.theme-charcoal-pat-quad {
    position: relative; }
    .section.theme-charcoal-pat-quad .section__inner {
      position: relative;
      z-index: 10; }
    .section.theme-charcoal-pat-quad:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: url(../images/pattern-quad-white.png);
      background-attachment: fixed;
      background-size: 2em;
      opacity: 0.06; }

.section.theme-warm-gray {
  background: #655656;
  color: #fff8ef; }

.section.theme-cream {
  background: #fff8ef; }
  .section.theme-cream h2, .section.theme-cream .intro {
    color: #444; }
  .section.theme-cream.section--bg-image .bg-image-wrapper {
    opacity: 0.15; }

.section.theme-gradient-burgundy-red {
  background: linear-gradient(45deg, #951829 0%, #ed1c24 100%); }

.theme-pink {
  background: #f2d4d7; }
  .theme-pink * {
    border-color: rgba(255, 255, 255, 0.4) !important; }

.theme-dark-gray {
  background: #63666a;
  color: #fff; }
  .theme-dark-gray.top-hits-topOfWindow:before {
    filter: blur(20px) grayscale(1) !important;
    opacity: 0.04; }
  .theme-dark-gray * {
    border-color: rgba(255, 255, 255, 0.4) !important; }

.theme-dark-burgundy {
  background: #4c0616;
  color: #fff; }
  .theme-dark-burgundy.top-hits-topOfWindow:before {
    filter: grayscale(1) !important;
    opacity: 0.06 !important; }
  .theme-dark-burgundy * {
    border-color: rgba(255, 255, 255, 0.4) !important; }

.media--story-item {
  overflow: visible; }
  .media--story-item .media__figure {
    border-radius: 0.4em;
    border: 0.2em solid #c6aa76;
    box-shadow: 0 0.2em 0.2em rgba(0, 0, 0, 0.2);
    overflow: hidden;
    transition: 0.4s transform ease; }
  .media--story-item:hover .media__figure {
    transform: scale(1.08) rotate(-3deg); }

@keyframes bounce {
  0% {
    transform: translateY(-0.2em); }
  50% {
    transform: translateY(0.2em); }
  100% {
    transform: translateY(-0.2em); } }

@keyframes pulsate {
  0% {
    opacity: 0.4; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0.4; } }

@keyframes fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes ken-burns {
  from {
    transform: scale(1); }
  to {
    transform: scale(1.4); } }

@keyframes zoom-in {
  0% {
    opacity: 0;
    transform: scale(0.6); }
  100% {
    opacity: 1;
    transform: scale(1); } }

@keyframes spin {
  from {
    transform: rotate(0deg); }
  to {
    transform: rotate(360deg); } }

.home {
  transition: 0.4s all ease; }
  .home .play-that-funky-music {
    color: #fff;
    position: absolute;
    right: 6em;
    top: 3.1em;
    z-index: 1010;
    font-family: "Source Sans Variable";
    /*

	
	
	*/
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    font-size: 1em;
    font-variation-settings: "wght" 360;
    line-height: 1.3;
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    animation-name: pulsate;
    animation-iteration-count: 8;
    animation-fill-mode: forwards;
    animation-duration: 1s;
    animation-timing-function: linear; }
    @media screen and (min-width: 30em) {
      .home .play-that-funky-music {
        font-size: 1em; } }
    @media screen and (min-width: 50em) {
      .home .play-that-funky-music {
        font-size: 0.8em; } }
  .home.sound-is-playing .play-that-funky-music {
    opacity: 0; }
  .home .vimeo-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden; }
    .home .vimeo-wrapper iframe {
      width: 100vw;
      height: 56.25vw;
      /* Given a 16:9 aspect ratio, 9/16*100 = 56.25 */
      min-height: 100vh;
      min-width: 177.77vh;
      /* Given a 16:9 aspect ratio, 16/9*100 = 177.77 */
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%); }

@keyframes d2-color-shift {
  0% {
    background: #fff; }
  100% {
    background: #d03334; } }

@keyframes d2-opacity-shift {
  0% {
    opacity: 1; }
  100% {
    opacity: 0.6; } }

@keyframes d2-stretch-down {
  0% {
    height: 100%;
    opacity: 1; }
  40% {
    height: 60%;
    opacity: 0; }
  100% {
    height: 0;
    opacity: 0; } }

.d-2 .background-drift {
  background: #fff;
  animation-name: d2-color-shift;
  animation-duration: 3s;
  animation-fill-mode: forwards;
  animation-delay: 10.2s; }

.d-2 .main-nav li {
  opacity: 0;
  animation-name: fade-in;
  animation-duration: 2s;
  animation-fill-mode: forwards;
  margin: 0;
  overflow: hidden; }
  .d-2 .main-nav li:nth-child(1) {
    animation-delay: 10.6s; }
  .d-2 .main-nav li:nth-child(2) {
    animation-delay: 11s; }
  .d-2 .main-nav li:nth-child(3) {
    animation-delay: 11.4s; }
  .d-2 .main-nav li:nth-child(4) {
    animation-delay: 11.8s; }
  .d-2 .main-nav li:nth-child(5) {
    animation-delay: 12.2s; }
  .d-2 .main-nav li:nth-child(6) {
    animation-delay: 12.6s; }
  .d-2 .main-nav li:nth-child(7) {
    animation-delay: 13s; }
  .d-2 .main-nav li:nth-child(8) {
    animation-delay: 13.4s; }
  .d-2 .main-nav li:nth-child(9) {
    animation-delay: 13.8s; }
  .d-2 .main-nav li:nth-child(10) {
    animation-delay: 14.2s; }
  .d-2 .main-nav li:nth-child(11) {
    animation-delay: 14.6s; }
  .d-2 .main-nav li:nth-child(12) {
    animation-delay: 15s; }
  .d-2 .main-nav li:nth-child(13) {
    animation-delay: 15.4s; }
  .d-2 .main-nav li:nth-child(14) {
    animation-delay: 15.8s; }
  .d-2 .main-nav li:nth-child(15) {
    animation-delay: 16.2s; }
  .d-2 .main-nav li:nth-child(16) {
    animation-delay: 16.6s; }
  .d-2 .main-nav li:nth-child(17) {
    animation-delay: 17s; }
  .d-2 .main-nav li:nth-child(18) {
    animation-delay: 17.4s; }
  .d-2 .main-nav li:nth-child(19) {
    animation-delay: 17.8s; }
  .d-2 .main-nav li:nth-child(20) {
    animation-delay: 18.2s; }

.d-2 .vimeo-wrapper {
  mix-blend-mode: multiply;
  animation-name: d2-opacity-shift;
  animation-duration: 3s;
  animation-fill-mode: forwards;
  animation-delay: 10.2s; }

.d-2 .welcome-new-students {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation-name: d2-stretch-down;
  animation-duration: 4s;
  animation-fill-mode: forwards;
  animation-delay: 9.6s; }
  .d-2 .welcome-new-students p {
    color: #fff;
    font-family: acumin-pro-extra-condensed;
    font-size: 4em;
    text-transform: uppercase; }

.masthead {
  position: fixed;
  position: absolute;
  z-index: 100; }

.soundtrack:hover,
.play-that-funky-music:hover {
  cursor: pointer; }

.soundtrack {
  position: absolute;
  top: 2em;
  right: 2em;
  z-index: 2000;
  width: 2em;
  height: 2em;
  background-size: contain;
  background-repeat: no-repeat; }
  .soundtrack:hover {
    cursor: pointer; }
  .soundtrack.paused {
    background-image: url(../images/soundtrack-icon-off.png); }
  .soundtrack.playing {
    background-image: url(../images/soundtrack-icon-on.png); }
  .soundtrack:before {
    position: absolute;
    top: -10%;
    bottom: -10%;
    content: '';
    width: 1px;
    border-left: 1px solid #fff;
    opacity: 0;
    transition: all ease 0.4s;
    transform: rotate(45deg);
    left: 50%; }
  .soundtrack.paused:before {
    opacity: 1; }
  .soundtrack input {
    position: absolute;
    top: 0;
    left: 0;
    border: none;
    background: transparent;
    width: 100%;
    height: 100%; }
    .soundtrack input:hover {
      cursor: pointer; }

.music-credit {
  border-radius: 0.4em;
  position: absolute;
  right: 2em;
  bottom: 2em;
  width: 12em;
  padding: 0.6em;
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  color: #fff; }
  .music-credit p {
    font-family: "Source Sans Variable";
    /*

	
	
	*/
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    font-size: 1em;
    font-variation-settings: "wght" 360;
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    margin: 0; }
    @media screen and (min-width: 30em) {
      .music-credit p {
        font-size: 1em; } }
    @media screen and (min-width: 50em) {
      .music-credit p {
        font-size: 0.74em; } }
  .sound-is-paused .music-credit {
    opacity: 0; }
  .sound-is-playing .music-credit {
    opacity: 1; }

.link--has-arrow:after, .link--external:after {
  transition: all 0.4s ease;
  content: "→";
  margin-left: 0.2em; }

.link--has-arrow:hover:after, .link--external:hover:after {
  margin-left: 0.6em; }

.border-wireframe-black, .border-wireframe-black-before:before {
  border: 1px solid transparent;
  border-image-slice: 78 145 140 72;
  border-image-width: 10px 18px 20px 10px;
  border-image-outset: 0px 0px 6px 0px;
  border-image-outset: 0.2px 9px 10px 0.5px;
  border-image-repeat: stretch stretch;
  border-image-source: url(../images/border-box-black.png); }

.border-wireframe-white {
  border: 1px solid transparent;
  border-image-slice: 78 145 140 72;
  border-image-width: 10px 18px 20px 10px;
  border-image-outset: 0px 0px 6px 0px;
  border-image-outset: 0.2px 9px 10px 0.5px;
  border-image-repeat: stretch stretch;
  border-image-source: url(../images/border-box-white.png); }

/*
.square-frame:not(.section) {
    @include state-up(transparent, #000);	
}
.section {
	
}

.xbutton--frame {
  @include state-up();
  
  &:hover {
    @include state-hover();
  }
  &:active {
    @include state-down();
  }
}
*/
.grid-2-cols {
  display: grid;
  grid-gap: 2.4em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .grid-2-cols {
      grid-template-columns: 1fr 1fr; }
      .grid-2-cols.cols--60-40 {
        grid-template-columns: 6fr 4fr; }
      .grid-2-cols.cols--40-60 {
        grid-template-columns: 4fr 6fr; } }
  .grid-2-cols.grid--main-content {
    padding-left: calc((100vw - 50em)/2);
    padding-right: calc((100vw - 50em)/2); }
    @media screen and (min-width: 50em) {
      .grid-2-cols.grid--main-content {
        width: 100vw;
        position: relative;
        left: 50%;
        right: 50%;
        margin-left: -50vw;
        margin-right: -50vw;
        max-width: none; } }
.grid-3-cols {
  display: grid;
  grid-gap: 2.4em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .grid-3-cols {
      /*

	
	
	*/
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      grid-template-columns: 1fr;
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ } }
  @media screen and (min-width: 50em) and (min-width: 30em) {
    .grid-3-cols {
      grid-template-columns: 1fr 1fr; } }
  @media screen and (min-width: 50em) and (min-width: 50em) {
    .grid-3-cols {
      grid-template-columns: 1fr 1fr 1fr; } }
.grid-4-cols {
  display: grid;
  grid-gap: 2.4em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .grid-4-cols {
      /*

	
	
	*/
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      grid-template-columns: 1fr;
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
      /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
      /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ } }
  @media screen and (min-width: 50em) and (min-width: 30em) {
    .grid-4-cols {
      grid-template-columns: 1fr 1fr; } }
  @media screen and (min-width: 50em) and (min-width: 50em) {
    .grid-4-cols {
      grid-template-columns: 1fr 1fr 1fr 1fr; } }
.colgap-wide {
  grid-column-gap: 3.4em; }

/*
	TO REVERT TO THE OLD DESIGN, SET CLASS TO d-1
*/
/*	Homepage
	======== */
.home {
  overflow: hidden; }

.pace {
  -webkit-pointer-events: none;
  pointer-events: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none; }

.pace-inactive {
  display: none; }

.pace .pace-progress {
  background: rgba(255, 255, 255, 0.1);
  position: fixed;
  z-index: 2000;
  top: 50%;
  right: 100%;
  width: 100%;
  height: 1px; }

.vassar__logo {
  position: absolute;
  top: 0;
  z-index: 10000;
  width: 7em;
  top: 1em;
  left: 1em;
  mix-blend-mode: overlay; }

@keyframes slidein {
  0% {
    transform: scale(1); }
  5% {
    transform: scale(1.05); }
  100% {
    transform: scale(2); } }

@keyframes fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes zoom-in {
  0% {
    opacity: 0;
    transform: scale(0.9); }
  100% {
    opacity: 1;
    transform: scale(1); } }

html body {
  /*		background: url(https://images.unsplash.com/photo-1558980664-769d59546b3d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=4650&q=100); */ }

.screen {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  min-height: 100vh; }

/*
.screen-2 {
	opacity: 0;
}
*/
/*	Screen 1 */
/*
.screen-1 {
	background: rgb(101,86,86);
	color: #fff;
	opacity: 0;
	z-index: -1;
}
.screen-1-active {
	.screen-1 {
		opacity: 1;
		z-index: 1;
	}
}
*/
.subtext {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 340;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  color: #000;
  margin-top: 1em;
  opacity: 0.7; }
  @media screen and (min-width: 30em) {
    .subtext {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .subtext {
      font-size: 0.9em; } }
.btn-enter:hover {
  transform: scale(1.1); }

.is-loaded,
.is-loading {
  height: 100vh;
  position: absolute;
  left: 0;
  top: 0;
  width: 100vw;
  align-items: center;
  display: flex;
  height: 100%;
  justify-content: center;
  width: 100%; }

.start-me-up {
  font-family: acumin-pro-extra-condensed;
  font-size: 8em;
  font-weight: 100;
  text-transform: uppercase;
  color: #222;
  opacity: 0;
  transition: 1s color ease;
  margin: 0;
  /*    
    &:hover {
	    cursor: pointer;
	    color: #fff;
    }
 */ }
  .loaded .start-me-up {
    animation-name: zoom-in;
    animation-fill-mode: forwards;
    animation-duration: 1s;
    animation-timing-function: ease-in; }

/*
.is-loading,
.is-loaded {
	position: relative;
	z-index: 3000;
}
*/
/*
.is-loading {
	opacity: 1;
}
.is-loaded {
	opacity: 0;
}

.loaded {
	.is-loading {
		opacity: 0;
	}
	.is-loaded {
		opacity: 1;
	}
	.screen-1 {

	}
}

//	After everything's loaded, show a welcome-mat for the site 

.is-loaded {
	flex-direction: column;
	background: $gold;
	overflow: hidden;

	&:before {
		opacity: 0.4;
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		
		background: url(../images/loadscreen.png);
		background-size: cover;

		animation-name: ken-burns;
		animation-fill-mode: forwards;
		animation-duration: 34s;
		animation-timing-function: ease-out;		
	}
	
	* {
		z-index: 10;
	}
}
*/
/*	Screen 2 */
.screen-2 {
  opacity: 0;
  z-index: -1;
  transition: 1s all ease; }

.screen-2-active {
  background: #ce4643; }
  .screen-2-active .screen-2 {
    opacity: 1;
    z-index: 1; }

.background-drift {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #63666a; }
  .background-drift:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover; }

.slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  opacity: 0;
  background: #ce4643; }
  .slide:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover; }
  .slide.slide-1:before {
    background-image: url(../images/110519_160over90_Vassar_2529-gm.jpg); }
  .slide.slide-2:before {
    background-image: url(../images/0191-19-10-ali-main-drone-vassar-vb-2043-gm.jpg); }
  .slide.slide-3:before {
    background-image: url(../images/110619_160over90_Vassar_7060-gm.jpg); }

.slide-cover {
  background: #ce4643; }

body.meet .slide-1,
body.explore .slide-2,
body.live .slide-3,
.slide-active {
  opacity: 1;
  z-index: 3;
  animation-name: slidein;
  animation-fill-mode: forwards;
  animation-duration: 30s;
  animation-timing-function: linear; }
  body.meet .slide-1:before,
  body.explore .slide-2:before,
  body.live .slide-3:before,
  .slide-active:before {
    animation-name: fade-in;
    animation-fill-mode: forwards;
    animation-duration: 1s;
    animation-timing-function: linear; }

/*
.screen-2-active {
	.background-drift {
		animation-name: slidein;
		animation-fill-mode: forwards;
		animation-duration: 60s;
		animation-timing-function: linear;
	}
}
*/
@keyframes initial-block {
  0% {
    height: 100%; }
  99% {
    height: 100%; }
  100% {
    height: 0%; } }

/*
		When the user clicks to enter the site, the cursor is positioned right over one of the
		main site links, which results in an immediate hover state. This generates a sound
		effect and is confusing; the user won't typically see the intro.
		
		Initial-block positions an element to momentarily block the hover state.
	*/
.initial-block {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 100;
  animation-name: initial-block;
  animation-fill-mode: forwards;
  animation-duration: 4s;
  animation-timing-function: ease-in-out; }

@keyframes fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

.background-drift .vimeo-wrapper {
  width: 100vw;
  object-fit: cover;
  height: 100vh; }

.d-1 .main-nav li {
  opacity: 0;
  animation-name: fade-in;
  animation-duration: 2s;
  animation-fill-mode: forwards;
  margin: 0;
  overflow: hidden; }
  .d-1 .main-nav li:nth-child(1) {
    animation-delay: 2.4s; }
  .d-1 .main-nav li:nth-child(2) {
    animation-delay: 2.8s; }
  .d-1 .main-nav li:nth-child(3) {
    animation-delay: 3.2s; }
  .d-1 .main-nav li:nth-child(4) {
    animation-delay: 3.6s; }
  .d-1 .main-nav li:nth-child(5) {
    animation-delay: 4s; }
  .d-1 .main-nav li:nth-child(6) {
    animation-delay: 4.4s; }
  .d-1 .main-nav li:nth-child(7) {
    animation-delay: 4.8s; }
  .d-1 .main-nav li:nth-child(8) {
    animation-delay: 5.2s; }
  .d-1 .main-nav li:nth-child(9) {
    animation-delay: 5.6s; }
  .d-1 .main-nav li:nth-child(10) {
    animation-delay: 6s; }
  .d-1 .main-nav li:nth-child(11) {
    animation-delay: 6.4s; }
  .d-1 .main-nav li:nth-child(12) {
    animation-delay: 6.8s; }
  .d-1 .main-nav li:nth-child(13) {
    animation-delay: 7.2s; }
  .d-1 .main-nav li:nth-child(14) {
    animation-delay: 7.6s; }
  .d-1 .main-nav li:nth-child(15) {
    animation-delay: 8s; }
  .d-1 .main-nav li:nth-child(16) {
    animation-delay: 8.4s; }
  .d-1 .main-nav li:nth-child(17) {
    animation-delay: 8.8s; }
  .d-1 .main-nav li:nth-child(18) {
    animation-delay: 9.2s; }
  .d-1 .main-nav li:nth-child(19) {
    animation-delay: 9.6s; }
  .d-1 .main-nav li:nth-child(20) {
    animation-delay: 10s; }

.d-1 .background-drift .vimeo-wrapper {
  filter: grayscale(1);
  opacity: 0.5; }

.main-nav {
  align-items: center;
  display: flex;
  justify-content: center;
  flex-direction: column;
  margin: 0;
  min-height: 100vh;
  padding: 0;
  text-align: center;
  position: relative;
  z-index: 20; }
  .main-nav li {
    list-style: none; }
  .main-nav b {
    font-weight: normal; }
  .main-nav a {
    -webkit-text-fill-color: transparent;
    -webkit-text-stroke: 1px #fff;
    display: flex;
    font-family: acumin-pro-extra-condensed;
    font-size: 10vw;
    /*

	
	
	*/
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    font-size: 5em;
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    justify-content: center;
    text-transform: uppercase;
    text-decoration: none; }
    @media screen and (min-width: 30em) {
      .main-nav a {
        font-size: 5em; } }
    @media screen and (min-width: 50em) {
      .main-nav a {
        font-size: 10vw; } }
    .main-nav a:before {
      position: fixed;
      top: 0;
      left: 0;
      width: 0;
      height: 100%;
      z-index: -1; }
    .main-nav a b {
      margin-right: 0;
      transition: all ease-in-out 0.4s; }
    .main-nav a span {
      display: inline-block;
      opacity: 0;
      width: 0;
      overflow: hidden;
      transition: all ease-in-out 0.4s; }
    .main-nav a:hover {
      color: #fff;
      -webkit-text-fill-color: #fff; }
      .main-nav a:hover b {
        margin-right: 0.2em; }
      .main-nav a:hover:before {
        width: 100%; }
      .main-nav a:hover span {
        width: 100%;
        opacity: 1; }
  .main-nav p {
    max-width: 40em;
    left: 0;
    margin: 0;
    font-size: 0.8em;
    color: #fff; }
  .main-nav a:hover span {
    max-width: fit-content;
    opacity: 1;
    width: 2em; }

@keyframes anim-outro {
  0% {
    transform: translate(0);
    opacity: 1;
    filter: blur(0); }
  100% {
    transform: translate(-10em);
    opacity: 0;
    filter: blur(20px); } }

/*
		The first element should have the gradients.
		The second has the solid color it shows before the page changes.
	
	*/
@keyframes anim-outro-curtain-1 {
  0% {
    width: 0;
    right: 0;
    left: 100%; }
  50% {
    width: 100vw;
    right: 0;
    left: 0; }
  100% {
    width: 0;
    left: 0;
    right: 100%; } }

@keyframes anim-outro-curtain-2 {
  0% {
    width: 0;
    right: 0;
    left: 100%; }
  100% {
    width: 100vw;
    right: 0;
    left: 0; } }

.outro-curtain {
  position: absolute;
  top: 0;
  right: 0;
  height: 100vh;
  width: 0;
  z-index: 200; }
  .outro-curtain:before, .outro-curtain:after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    height: 100vh;
    width: 0; }
  .outro-curtain:before {
    background: linear-gradient(to right, rgba(125, 185, 232, 0) 0%, red 51%, white 100%);
    background: linear-gradient(to right, rgba(125, 185, 232, 0) 0%, #ffd400 25%, red 51%, white 100%);
    background: linear-gradient(to right, rgba(125, 185, 232, 0) 0%, #ffd400 25%, #ff0300 88%, red 89%, white 100%);
    background: linear-gradient(to right, rgba(125, 185, 232, 0) 0%, #c6aa76 25%, red 63%, white 100%); }
  .outro-curtain:after {
    background: #fff; }

.launch-outro .outro-curtain {
  width: 100vw; }
  .launch-outro .outro-curtain:before, .launch-outro .outro-curtain:after {
    animation-fill-mode: forwards;
    animation-timing-function: ease-in-out; }
  .launch-outro .outro-curtain:before {
    animation-name: anim-outro-curtain-1;
    animation-delay: 1.4s;
    animation-duration: 0.4s; }
  .launch-outro .outro-curtain:after {
    animation-name: anim-outro-curtain-2;
    animation-delay: 1.6s;
    animation-duration: 0.2s; }

.launch-outro .main-nav li {
  opacity: 1;
  animation-name: anim-outro;
  animation-fill-mode: forwards;
  animation-duration: 1s;
  animation-timing-function: ease-in; }
  .launch-outro .main-nav li:nth-child(1) {
    animation-delay: 0.4s; }
  .launch-outro .main-nav li:nth-child(2) {
    animation-delay: 0.8s; }
  .launch-outro .main-nav li:nth-child(3) {
    animation-delay: 1.2s; }
  .launch-outro .main-nav li:nth-child(4) {
    animation-delay: 1.6s; }
  .launch-outro .main-nav li:nth-child(5) {
    animation-delay: 2s; }
  .launch-outro .main-nav li:nth-child(6) {
    animation-delay: 2.4s; }
  .launch-outro .main-nav li:nth-child(7) {
    animation-delay: 2.8s; }
  .launch-outro .main-nav li:nth-child(8) {
    animation-delay: 3.2s; }
  .launch-outro .main-nav li:nth-child(9) {
    animation-delay: 3.6s; }
  .launch-outro .main-nav li:nth-child(10) {
    animation-delay: 4s; }
  .launch-outro .main-nav li:nth-child(11) {
    animation-delay: 4.4s; }
  .launch-outro .main-nav li:nth-child(12) {
    animation-delay: 4.8s; }
  .launch-outro .main-nav li:nth-child(13) {
    animation-delay: 5.2s; }
  .launch-outro .main-nav li:nth-child(14) {
    animation-delay: 5.6s; }
  .launch-outro .main-nav li:nth-child(15) {
    animation-delay: 6s; }
  .launch-outro .main-nav li:nth-child(16) {
    animation-delay: 6.4s; }
  .launch-outro .main-nav li:nth-child(17) {
    animation-delay: 6.8s; }
  .launch-outro .main-nav li:nth-child(18) {
    animation-delay: 7.2s; }
  .launch-outro .main-nav li:nth-child(19) {
    animation-delay: 7.6s; }
  .launch-outro .main-nav li:nth-child(20) {
    animation-delay: 8s; }

details summary::-webkit-details-marker {
  display: none; }

.tab__contents {
  padding-top: 1em; }

.home-link {
  position: absolute;
  z-index: 20;
  left: 40%;
  width: 20%;
  text-align: center;
  top: 1em;
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 640;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  text-decoration: none; }
  @media screen and (min-width: 30em) {
    .home-link {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .home-link {
      font-size: 0.8em; } }
  .home-link:link {
    color: #fff; }
  .home-link:visited {
    color: #fff; }
  .home-link:hover, .home-link:visited:hover, .home-link:focus {
    color: #ed1c24; }
  .home-link:active, .home-link:visited:active {
    color: #ed1c24; }

.nav__btn {
  height: 1.4em;
  position: absolute;
  right: 1em;
  transition: 0.4s all ease-in-out;
  top: 1em;
  width: 2em;
  display: inline-block; }
  .nav__btn .nav-btn__label {
    color: transparent; }
  .nav__btn:before {
    content: '';
    color: #fff;
    font-size: 1.4em;
    position: absolute;
    top: 0;
    transition: 0.4s all ease-in-out;
    left: 0;
    width: 100%;
    text-shadow: 0 0.06em 0.06em rgba(0, 0, 0, 0.4);
    background: url(../images/nav-open-icon.png);
    width: 1.2em;
    height: 1.2em;
    background-size: contain;
    background-repeat: no-repeat; }
  .nav__btn:hover:before {
    transform: scale(1.4) perspective(200px) rotateX(45deg); }

.nav-btn__label {
  opacity: 0; }

.nav {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  width: 100vw; }

#nav:target .nav__btn {
  opacity: 0;
  top: 4em; }

#nav:target .nav__panel {
  width: 100vw; }

#nav:target .nav__item {
  height: 100vh;
  opacity: 1; }
  #nav:target .nav__item a {
    opacity: 1; }

#nav:target .nav-close-btn {
  top: 1em; }

.nav-close-btn {
  top: -3em;
  right: 1em;
  width: 2.4em;
  height: 2.4em;
  z-index: 10;
  transition: 0.4s all ease-in-out;
  position: absolute;
  background: url(../images/nav-close-icon.png);
  background-size: contain; }
  .nav-close-btn:hover {
    transform: scale(1.1); }

.nav__panel {
  position: absolute;
  height: 100vh;
  top: 0;
  right: 0;
  width: 0;
  transition: 0.4s all ease-in-out;
  /* background: #641a2b;
    background: linear-gradient(90deg, #641a2b 0%, #951829 100%); */
  background: #641a2b url("../images/program-cover-bg-2.jpg") no-repeat center; }

.nav__menu {
  list-style: none;
  padding: 2% 0 10%;
  margin: 0;
  position: absolute;
  height: 80vh;
  width: 90%;
  top: 10%;
  left: 5%;
  display: flex;
  flex-direction: column;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .nav__menu {
      /* flex-direction: row; */
      padding: 2% 0 5%;
      height: 75vh;
      width: 40%;
      top: 12.5vh;
      left: 30%; } }
.nav__menu:after {
  content: "";
  top: 0;
  left: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  transform: skewY(15deg);
  border: 1px solid #ed1c24; }

.nav__item {
  position: relative;
  height: 0;
  transition: 0.7s all ease-in-out;
  opacity: 0;
  overflow: hidden;
  /* background: $gold; */
  margin: 0;
  width: 100%;
  z-index: 9999; }
  .nav__item:before {
    will-change: opacity;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-size: cover;
    top: 0;
    left: 0;
    background-position: center;
    filter: grayscale(1);
    opacity: 0.6;
    transition: 0.7s all ease-in-out; }
  .nav__item:hover:before {
    filter: sepia(0);
    transform: scale(1.1);
    opacity: 1; }
  .nav__item a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: acumin-pro-extra-condensed;
    opacity: 0;
    transition: 0.7s all ease-in-out;
    top: 0;
    text-decoration: none;
    text-transform: uppercase;
    color: white;
    /*

	
	
	*/
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    font-size: 4em;
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
    @media screen and (min-width: 30em) {
      .nav__item a {
        font-size: 4em; } }
    @media screen and (min-width: 50em) {
      .nav__item a {
        font-size: 6vw; } }
    .nav__item a:before {
      transition: 0.7s all ease-in-out; }
    .nav__item a:hover {
      color: white;
      mix-blend-mode: overlay;
      transform: scale(0.9); }

h1 {
  color: #fff;
  font-family: freight-big-pro, serif;
  text-transform: uppercase;
  font-style: italic;
  letter-spacing: -0.08em;
  word-spacing: 0.2em;
  margin: 0;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 3em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    h1 {
      font-size: 5em; } }
  @media screen and (min-width: 50em) {
    h1 {
      font-size: 10vw; } }
  h1 > b {
    display: block;
    line-height: 0.625; }

@keyframes shift-left {
  from {
    opacity: 0;
    transform: translateX(-2em); }
  to {
    opacity: 1;
    transform: translateX(0); } }

@keyframes shift-right {
  from {
    opacity: 0;
    transform: translateX(2em); }
  to {
    opacity: 1;
    transform: translateX(0); } }

@keyframes wipe-in {
  from {
    width: 0; }
  to {
    width: 100%; } }

@keyframes fade-in {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

@keyframes ken-burns {
  from {
    transform: scale(1); }
  to {
    transform: scale(1.4); } }

@keyframes pop-in {
  0% {
    opacity: 0;
    transform: scale(1.4); }
  100% {
    opacity: 1;
    transform: scale(1); } }

.pop-in-later {
  left: -0.56em;
  position: absolute;
  transform: scale(1.4);
  opacity: 0;
  position: absolute;
  display: block; }

.loaded .pop-in-later {
  animation-name: pop-in;
  animation-delay: 2s;
  animation-fill-mode: forwards;
  animation-duration: 2s; }

.animation-edge > * {
  opacity: 0; }

.loaded body {
  opacity: 1; }

.loaded .animation-edge .anim-component-edge1 {
  animation-name: shift-left;
  animation-fill-mode: forwards;
  animation-duration: 4s; }

.loaded .animation-edge .anim-component-edge2 {
  animation-name: shift-right;
  animation-fill-mode: forwards;
  animation-duration: 4s; }

.loaded .animation-edge > * {
  opacity: 1; }

.loaded .animation-edge .anim-component-edge1,
.loaded .animation-edge .anim-component-edge2 {
  transform: translateX(0); }

.header-cover {
  align-items: center;
  background: #641A2B;
  display: flex;
  justify-content: center;
  min-height: 100vh;
  opacity: 0;
  overflow: hidden;
  position: relative;
  transition: 2s all ease;
  transition-delay: 1s; }
  .header-cover:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background: url(../images/explore-cover.jpg);
    top: 0;
    left: 0;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .header-cover:before {
        background-size: cover;
        background-position: top; } }
  .header-cover:after {
    background: url(../images/arrow.png);
    background-size: contain;
    background-repeat: no-repeat;
    content: '';
    position: absolute;
    width: 2em;
    height: 2em;
    bottom: 2em;
    animation-name: bounce;
    animation-duration: 2s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
    opacity: 1;
    transition: 0.4s opacity ease; }
    .scrolled .header-cover:after {
      opacity: 0; }

/*
.loading {
	position: relative;
	
	&:before {
		animation-name: spin;
		animation-duration: 10s;
		animation-iteration-count: infinite;
		animation-timing-function: linear;

		background: url(../images/loader.gif);
		position: fixed;
		width: 16em;
		height: 16em;
		content: "";
		top: calc(50vh - 8em);
		left: calc(50vw - 8em);
		background-size: cover;
	}
}
*/
.loaded .header-cover {
  opacity: 1; }
  .loaded .header-cover:before {
    animation-name: ken-burns;
    animation-fill-mode: forwards;
    animation-duration: 4s; }

/*	IMAGE BACKGROUND
	================ */
.section.image-background {
  min-height: 100vh;
  position: relative;
  padding-right: 0; }
  .section.image-background:before {
    position: absolute;
    content: "";
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background: url("../images/1221_Vassar-College_exteriors-+-campus-life_Oct-2019_JA.jpg");
    background-attachment: fixed;
    background-size: cover;
    z-index: -1;
    filter: blur(20px) contrast(10);
    opacity: 0;
    transition: 2s all ease; }
  .section.image-background .section__content {
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(20px) contrast(1);
    float: right;
    opacity: 0;
    padding: 2em;
    transition: 1s all ease;
    width: 40%;
    transform: translateX(2em); }
  .section.image-background.animation:before {
    opacity: 1;
    filter: none; }
  .section.image-background.show-text .section__content {
    opacity: 1;
    transform: translateX(0); }

@keyframes fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

/*
	To display a load screen for an element, apply a class of show-load-screen.
	
	Note: this requires both the :before and :after pseudos.
*/
/*
.loading {
	body {
		opacity: 0;
	}
}
.loaded {
	body {
		animation-name: fade-in;
		animation-duration: 1s;
		animation-timing-function: linear;
		animation-fill-mode: forwards;
	}
}
*/
.show-load-screen,
.loading {
  position: relative; }
  .show-load-screen:before,
  .loading:before {
    animation-name: spin;
    animation-duration: 10s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    background: url(../images/loader.png);
    position: fixed;
    width: 16em;
    height: 16em;
    content: "";
    top: calc(50vh - 8em);
    left: calc(50vw - 8em);
    background-size: cover;
    z-index: 1001; }
  .show-load-screen:after,
  .loading:after {
    animation-name: fade-in;
    animation-duration: 0.4s;
    position: absolute;
    content: '';
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: white;
    /* backdrop-filter: blur(20px); */
    z-index: 1000; }

/*
.page-content {
  height: 100vh;
  overflow-x: hidden;
  overflow-y: auto;
  perspective: 2px;
  
  position: relative;
  
  margin-top: -100vh;
  padding-top: 100vh;  
  
}

.use-parallax {
	overflow: hidden;
	
	&:before, img {
		transform: translateZ(-1px) scale(1.5);
		height: 100vh !important;
	}
}
*/
/*	VIDEO TABS
	========== */
summary:hover {
  cursor: pointer; }

.largetab {
  border-bottom: 3px solid #eee;
  padding: 1em 2em; }
  .largetab .largetab__title {
    text-align: center; }
    .largetab .largetab__title:before {
      transition: 0.4s all ease;
      content: ">";
      margin-left: -0.5em;
      position: absolute; }
  .largetab[open] > summary:before {
    transform: rotate(90deg); }

.subtab {
  border-top: 1px solid #223; }
  .subtab summary {
    padding: 0.4em;
    position: relative;
    text-align: center; }
    .subtab summary:before {
      content: '\2715';
      transition: 0.4s all ease;
      position: absolute;
      line-height: 0;
      top: 50%;
      transform: rotate(45deg);
      font-size: 60%;
      color: rgba(255, 255, 255, 0.4);
      margin-left: -10.5%;
      /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
      @media screen and (min-width: 50em) {
        .subtab summary:before {
          margin-left: -3.5%; } }
  .subtab[open] {
    padding-bottom: 2em; }
    .subtab[open] > summary:before {
      color: #f00;
      transform: rotate(0);
      font-weight: bold;
      font-size: 100%;
      top: 55%;
      margin-left: -11.5%;
      /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
      @media screen and (min-width: 50em) {
        .subtab[open] > summary:before {
          margin-left: -4.5%; } }
.largetab__title + .tab__contents details:nth-child(1) {
  animation-delay: 0.2s; }

.largetab__title + .tab__contents details:nth-child(2) {
  animation-delay: 0.4s; }

.largetab__title + .tab__contents details:nth-child(3) {
  animation-delay: 0.6s; }

.largetab__title + .tab__contents details:nth-child(4) {
  animation-delay: 0.8s; }

.largetab__title + .tab__contents details:nth-child(5) {
  animation-delay: 1s; }

.largetab__title + .tab__contents details:nth-child(6) {
  animation-delay: 1.2s; }

.largetab__title + .tab__contents details:nth-child(7) {
  animation-delay: 1.4s; }

.largetab__title + .tab__contents details:nth-child(8) {
  animation-delay: 1.6s; }

.largetab__title + .tab__contents details:nth-child(9) {
  animation-delay: 1.8s; }

.largetab__title + .tab__contents details:nth-child(10) {
  animation-delay: 2s; }

.largetab__title + .tab__contents details:nth-child(11) {
  animation-delay: 2.2s; }

.largetab__title + .tab__contents details:nth-child(12) {
  animation-delay: 2.4s; }

.largetab__title + .tab__contents details:nth-child(13) {
  animation-delay: 2.6s; }

.largetab__title + .tab__contents details:nth-child(14) {
  animation-delay: 2.8s; }

.largetab__title + .tab__contents details:nth-child(15) {
  animation-delay: 3s; }

.largetab__title + .tab__contents details:nth-child(16) {
  animation-delay: 3.2s; }

.largetab__title + .tab__contents details:nth-child(17) {
  animation-delay: 3.4s; }

.largetab__title + .tab__contents details:nth-child(18) {
  animation-delay: 3.6s; }

.largetab__title + .tab__contents details:nth-child(19) {
  animation-delay: 3.8s; }

.largetab__title + .tab__contents details:nth-child(20) {
  animation-delay: 4s; }

@keyframes fade-in {
  0% {
    opacity: 0%; }
  100% {
    opacity: 100%; } }

details[open] .tab__contents details {
  opacity: 0; }

details[open] .tab__contents details {
  animation-delay: 0;
  animation-name: fade-in;
  animation-duration: 2s;
  animation-fill-mode: forwards; }

.video-grid .grid__tile {
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  .video-grid .grid__tile:nth-child(1) {
    animation-delay: 0.1s; }
  .video-grid .grid__tile:nth-child(2) {
    animation-delay: 0.2s; }
  .video-grid .grid__tile:nth-child(3) {
    animation-delay: 0.3s; }
  .video-grid .grid__tile:nth-child(4) {
    animation-delay: 0.4s; }
  .video-grid .grid__tile:nth-child(5) {
    animation-delay: 0.5s; }
  .video-grid .grid__tile:nth-child(6) {
    animation-delay: 0.6s; }
  .video-grid .grid__tile:nth-child(7) {
    animation-delay: 0.7s; }
  .video-grid .grid__tile:nth-child(8) {
    animation-delay: 0.8s; }
  .video-grid .grid__tile:nth-child(9) {
    animation-delay: 0.9s; }
  .video-grid .grid__tile:nth-child(10) {
    animation-delay: 1s; }
  .video-grid .grid__tile:nth-child(11) {
    animation-delay: 1.1s; }
  .video-grid .grid__tile:nth-child(12) {
    animation-delay: 1.2s; }
  .video-grid .grid__tile:nth-child(13) {
    animation-delay: 1.3s; }
  .video-grid .grid__tile:nth-child(14) {
    animation-delay: 1.4s; }
  .video-grid .grid__tile:nth-child(15) {
    animation-delay: 1.5s; }
  .video-grid .grid__tile:nth-child(16) {
    animation-delay: 1.6s; }
  .video-grid .grid__tile:nth-child(17) {
    animation-delay: 1.7s; }
  .video-grid .grid__tile:nth-child(18) {
    animation-delay: 1.8s; }
  .video-grid .grid__tile:nth-child(19) {
    animation-delay: 1.9s; }
  .video-grid .grid__tile:nth-child(20) {
    animation-delay: 2s; }
  @media screen and (min-width: 50em) {
    .video-grid .grid__tile {
      margin-bottom: 0; } }
@keyframes fade-in {
  0% {
    opacity: 0%; }
  100% {
    opacity: 100%; } }

.video-grid[open] .grid__tile {
  opacity: 0; }

.video-grid[open] .grid__tile {
  animation-delay: 0;
  animation-name: fade-in;
  animation-duration: 2s;
  animation-fill-mode: forwards; }

.tile__caption {
  margin-top: 0.6em; }

.tile__title {
  position: absolute;
  background: rgba(0, 0, 0, 0.8);
  z-index: 10;
  padding: 0.2em 0.4em;
  top: 0.1em;
  left: 0.1em;
  border-radius: 0.4em; }

.video-tile {
  display: block;
  background: #fff; }
  .video-tile, .video-tile .shine, .video-tile img {
    border-radius: 0.4em; }
  .video-tile img {
    transition: 1s all ease !important;
    mix-blend-mode: multiply; }
  .video-tile .shine {
    mix-blend-mode: overlay; }
  .video-tile:hover {
    background: #c6aa76;
    cursor: pointer; }
    .video-tile:hover img {
      filter: grayscale(1) contrast(2);
      opacity: 0.6; }

.row {
  margin-bottom: 2em; }

.header-cover__container h1 {
  position: fixed;
  will-change: transform; }

.header-cover__container h1 {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column; }

.header-cover__container {
  position: absolute;
  width: 100vw;
  height: 100vh;
  clip-path: inset(0 0 0 0); }

/*	Layout
	====== */
.section {
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  padding: 1em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  overflow-x: hidden; }
  @media screen and (min-width: 30em) {
    .section {
      padding: 1em; } }
  @media screen and (min-width: 50em) {
    .section {
      padding: 4em; } }
  .section h3 {
    margin-top: 1em; }
  .section.section--padding-small {
    padding-left: 1em;
    padding-right: 1em; }
  .section__inner {
    max-width: 30em;
    margin: 0 auto; }

.content-fullwidth .section__content {
  max-width: none; }

.section--fancylayout .section__inner {
  max-width: none;
  position: relative;
  z-index: 10; }

.section--fancylayout .section__header {
  margin-bottom: 4em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .section--fancylayout .section__header {
      display: flex; } }
  .section--fancylayout .section__header h2 {
    padding-right: 1em;
    text-align: left;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section--fancylayout .section__header h2 {
        width: 40%; } }
    .section--fancylayout .section__header h2:before {
      display: none; }
  .section--fancylayout .section__header .intro-container {
    margin: 0;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section--fancylayout .section__header .intro-container {
        width: 60%; } }
.section--fit-screen {
  min-height: 100vh; }

.section--bg-image {
  position: relative; }
  .section--bg-image .section__inner {
    position: relative;
    z-index: 10; }
  .section--bg-image .bg-image-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }
  .section--bg-image .bg-image {
    display: none;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover; }
  .section--bg-image.image-at-top .bg-image {
    object-position: top; }
  .section--bg-image.image-at-bottom .bg-image {
    object-position: bottom; }

.section--quote {
  background: linear-gradient(45deg, #641A2B 0%, #ed1c24 100%);
  position: relative;
  border: 0.4em solid #fff; }
  .section--quote .section__inner p {
    color: #fff8ef;
    font-family: freight-big-pro, serif;
    /*

	
	
	*/
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    font-size: 2em;
    letter-spacing: 0.02em;
    line-height: 1.2;
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
    text-shadow: 0 0.25em 0.1em rgba(0, 0, 0, 0.2); }
  .section--quote:before {
    content: '';
    position: absolute;
    top: 1em;
    left: 1em;
    bottom: 1em;
    right: 1em;
    border: 2px solid #fff;
    border-image: linear-gradient(135deg, #951829 0%, #ed1c24 100%);
    border-image-slice: 1; }

/*	
	This has a large image background, visible as soon as it scrolls into view. When the content part scrolls into view, the background fades.
*/
.section--full-iframe {
  position: relative;
  padding: 4em;
  min-height: 100vh; }
  .section--full-iframe.iframe-loading {
    /*		
		&:before {
			animation-name: spin;
			animation-duration: 10s;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
	
			background: url(../images/loader.png);
			position: fixed;
			width: 16em;
			height: 16em;
			content: "";
			top: calc(50vh - 8em);
			left: calc(50vw - 8em);
			background-size: cover;
			z-index: 10;
		}
		&:after {
			position: absolute;
			content: '';
			width: 100%;
			height: 100%;
			top: 0;
			left: 0;
			background: rgba(255,255,255,0.4);			
		}
*/ }
  .section--full-iframe.iframe-loaded iframe {
    border: 1px solid transparent;
    border-image-slice: 78 145 140 72;
    border-image-width: 10px 18px 20px 10px;
    border-image-outset: 0px 0px 6px 0px;
    border-image-outset: 0.2px 9px 10px 0.5px;
    border-image-repeat: stretch stretch;
    border-image-source: url(../images/border-box-black.png); }
  .section--full-iframe .begone {
    display: none; }
  .section--full-iframe.click-to-load {
    position: relative;
    /*		
		input {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			-webkit-appearance: none;
		    z-index: 20;
		    background: transparent;
		}
*/ }

.section--bg-map {
  padding: 2em;
  background: url(../images/map-cover.jpg);
  background-size: cover;
  margin-top: 1em; }
  .section--bg-map h2 {
    margin-bottom: 0.4em; }
  .section--bg-map.iframe-loaded {
    background: #fff8ef; }
    .section--bg-map.iframe-loaded .map-load-text-container {
      display: none; }
  .section--bg-map .map-load-text-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center; }

.acad:before {
  background-image: url(/2024/assets/images/live-acad-110519_160over90_Vassar_0378.jpg); }

.section--cover-img {
  min-height: 120vh;
  position: relative;
  padding-top: 2em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/
  /*	&:before {
	    position: absolute;
	    content: "";
	    height: 100%;
	    width: 100%;
	    top: 0;
	    left: 0;
	    bottom: 0;
	    right: 0;
	    transition: 1s all ease;
	} */
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  .section--cover-img:before {
    content: '';
    background-size: cover;
    background-attachment: fixed;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0; }
  @media screen and (min-width: 50em) {
    .section--cover-img {
      padding-top: 8em; } }
  .section--cover-img .section__inner {
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section--cover-img .section__inner {
        opacity: 0;
        transform: scale(0.96);
        transition: 1s all ease; } }
  .section--cover-img .bg-image-wrapper {
    width: 100%;
    height: 20em;
    /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
    @media screen and (min-width: 50em) {
      .section--cover-img .bg-image-wrapper {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transition: 1s all ease; } }
  .section--cover-img .bg-image {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    object-fit: cover; }
  .section--cover-img.image-at-top .bg-image {
    object-position: top; }
  @media screen and (min-width: 50em) {
    .section--cover-img.top-hits-topOfWindow .bg-image {
      filter: grayscale(1);
      opacity: 0.1; }
    .section--cover-img.top-hits-topOfWindow .section__inner {
      opacity: 1;
      transform: scale(1); } }
.img--students:before {
  background-image: url(../images/1221_Vassar-College_exteriors-+-campus-life_Oct-2019_JA.jpg); }

.img--faculty:before {
  background-image: url(../images/0020_15_03_KR_0028.jpg); }

.section--social {
  padding-bottom: 1em; }

/*	Type
	==== */
.section__intro {
  max-width: 24em;
  text-align: center;
  margin: 0 auto; }

/*	Themes
	====== */
.section--black {
  background: #17161d;
  color: #eee; }
  .section--black .largetab {
    border-color: #223; }

/*	Animation
	========= */
.fade-in-on-scroll.animate-this {
  opacity: 0;
  transition: all ease 1s; }

.fade-in-on-scroll.top-50pfrom-topOfWindow {
  opacity: 1; }

.viewbox {
  color: #f00; }

.vb-video-loading {
  border: 3em solid #ff0 !important; }

.vb-video-loaded.vb-active {
  overflow: hidden; }
  .vb-video-loaded.vb-active .vb-container {
    display: flex;
    overflow-x: scroll;
    animation-name: zoom-in;
    animation-fill-mode: forwards;
    animation-duration: 1s;
    color: #eee; }
    .vb-video-loaded.vb-active .vb-container:before {
      position: absolute;
      content: '';
      top: 1em;
      left: 1em;
      right: 1em;
      bottom: 1em;
      border: 1px solid transparent;
      border-image-slice: 78 145 140 72;
      border-image-width: 10px 18px 20px 10px;
      border-image-outset: 0px 0px 6px 0px;
      border-image-outset: 0.2px 9px 10px 0.5px;
      border-image-repeat: stretch stretch;
      border-image-source: url(../images/border-box-white.png); }

.vb-container {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background: black;
  backdrop-filter: blur(10px);
  flex-flow: column;
  justify-content: center;
  z-index: 314159; }
  .vb-container .u-Video {
    box-shadow: 0 0.4em 1em #000;
    border: 1px solid #444; }

.vb-content {
  padding: 3em;
  position: relative;
  z-index: 20; }
  .vb-content a:link {
    color: #c6aa76; }
  .vb-content a:visited {
    color: #c6aa76; }
  .vb-content a:hover, .vb-content a:visited:hover, .vb-content a:focus {
    color: #fff; }
  .vb-content a:active, .vb-content a:visited:active {
    color: #fff; }

.input--click-area {
  /*  Accessibility thing for elements that aren't links but need to be clickable. Set them up as buttons, so the user can tab to them, but wrap them in an element that has the visual design. The button is just a clickable/tab-to area. 
	  
	  */
  -webkit-appearance: none;
  border: none;
  background: none; }

input.vb-close.input--click-area:hover {
  cursor: pointer; }

.vb-close-wrapper {
  width: 2em;
  height: 2em;
  top: 2em;
  right: 2em;
  position: absolute;
  background: url(../images/x-white.png);
  z-index: 80;
  background-size: 80%;
  background-repeat: no-repeat;
  background-position: center;
  transition: 0.4s background ease; }
  .vb-close-wrapper:hover, .vb-close-wrapper:focus {
    cursor: pointer;
    background-size: 100%; }
  .vb-close-wrapper .input--click-area {
    position: absolute;
    width: 100%;
    height: 100%; }

.vb-media {
  position: relative; }
  .vb-media:before {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    content: "Loading";
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgba(0, 0, 0, 0.1); }

/*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/
@media screen and (min-width: 50em) {
  .vb-content {
    display: grid;
    grid-gap: 2em;
    grid-template-columns: auto 14em;
    grid-template-rows: auto 1fr;
    grid-template-areas: "vb-video vb-title" "vb-video vb-caption"; }
  .vb-media {
    grid-area: vb-video; }
  .vb-title {
    grid-area: vb-title;
    text-align: left; }
  .vb-caption {
    grid-area: vb-caption; } }

.has-grid {
  max-width: 50em; }

.width-wide {
  padding-left: calc((100vw - 40em)/2);
  padding-right: calc((100vw - 40em)/2); }
  @media screen and (min-width: 50em) {
    .width-wide {
      width: 100vw;
      position: relative;
      left: 50%;
      right: 50%;
      margin-left: -50vw;
      margin-right: -50vw;
      max-width: none; } }
.width-xwide {
  padding-left: calc((100vw - 50em)/2);
  padding-right: calc((100vw - 50em)/2); }
  @media screen and (min-width: 50em) {
    .width-xwide {
      width: 100vw;
      position: relative;
      left: 50%;
      right: 50%;
      margin-left: -50vw;
      margin-right: -50vw;
      max-width: none; } }
.width-xxwide {
  padding-left: calc((100vw - 60em)/2);
  padding-right: calc((100vw - 60em)/2); }
  @media screen and (min-width: 50em) {
    .width-xxwide {
      width: 100vw;
      position: relative;
      left: 50%;
      right: 50%;
      margin-left: -50vw;
      margin-right: -50vw;
      max-width: none; } }
.foursquare {
  position: relative;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  margin-bottom: 3em;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  grid-gap: 8%;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .foursquare {
      grid-gap: 14%; } }
  .foursquare a {
    display: block;
    transition: 0.4s all ease; }
    .foursquare a:hover {
      transform: scale(1.4) perspective(200px) rotateX(45deg); }

/*
.foursquare {
	position: relative;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: 4em;

	&:before,
	&:after {
		border: 1px solid #000;
		content: '';
		position: absolute;
	}
	&:before {
		left: 50%;
		top: 0;
		height: 100%;
		width: 1px;
	}
	&:after {
		left: 0;
		top: 50%;
		width: 100%;
		height: 1px;
	}

	& > * {
	    padding: 2em;
	}
}
*/
/*	Flickity
	========

	This is designed to be mostly markup-agnostic beyond the markup and standard classes generated
	or applied by Flickity. However:
	
	 - images should be contained in a "figure" tag
	 - captions should be contained in a "figcaption" tag.
	
	 Refer to the following structure. You don't need to apply classes of "gallery-container" or
	 "gallery" - those are for clarity - or use a <ul>, although the main gallery container,
	which in this case is <ul class="gallery">, will need a class so you can invoke Flickity on it. 
		
<figure class="gallery-container single-image">
   <ul class="gallery">
      <li class="gallery-item">
         <figure>
            <img src="image-1.jpg" />
            <figcaption>Caption 1</figcaption>
         </figure>
      </li>
      <li class="gallery-item">
         <figure>
            <img src="image-2.jpg" />
            <figcaption>Caption 1</figcaption>
         </figure>
      </li>
      <li class="gallery-item">
         <figure>
            <img src="image-3.jpg" />
            <figcaption>Caption 1</figcaption>
         </figure>
      </li>
   </ul>
</figure>
*/
.flickity-enabled {
  height: var(--gallery-height, 26em);
  margin-bottom: 1.6em; }
  .flickity-enabled .blocks-gallery-item,
  .flickity-enabled .blocks-gallery-item figure,
  .flickity-enabled .blocks-gallery-item img {
    height: 100%; }
  .flickity-enabled figcaption.blocks-gallery-item__caption {
    bottom: 0;
    position: absolute; }

/*	Image stream
	============

	In this configuration, images appear as a stream. The image currently being viewed
	will be aligned to the left; the other images in the gallery will appear next to it,
	probably cropped by the right edge of the window.
*/
.image-stream .blocks-gallery-item__caption {
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(20px);
  padding: 0.4em 1em; }

.image-stream .blocks-gallery-item {
  padding: 1em;
  padding-right: 0; }

.image-stream .carousel-cell {
  padding: 1em; }
  @media (orientation: landscape) {
    .image-stream .carousel-cell {
      height: 100%; } }
  @media (orientation: portrait) {
    .image-stream .carousel-cell {
      width: 100%; } }
.image-stream .flickity-page-dots {
  bottom: auto;
  top: -0.4em; }
  .image-stream .flickity-page-dots .dot {
    background: #fff; }

.image-stream figure {
  margin: 0;
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%; }

@media (orientation: landscape) {
  .image-stream img {
    width: unset;
    height: 100%; } }

@media (orientation: portrait) {
  .image-stream img {
    height: unset;
    width: 100%; } }

.image-stream .flickity-enabled {
  padding-left: 0; }

.image-stream .flickity-viewport {
  height: 100% !important;
  overflow: visible !important; }

.image-stream figcaption {
  z-index: 100;
  color: #fff;
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 360;
  line-height: 1.3;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  padding: 0.4em 0.8em;
  background: rgba(0, 0, 0, 0.8);
  max-width: 30em; }
  @media screen and (min-width: 30em) {
    .image-stream figcaption {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .image-stream figcaption {
      font-size: 0.8em; } }
/*	Single image
	============

	In this configuration, each image appears by itself, centered in the middle
	of the gallery. There will typically be black space on both sides. 
*/
.single-image {
  background: #000;
  padding-top: 2em; }
  .single-image .flickity-slider > * {
    text-align: center; }
    .single-image .flickity-slider > * figcaption {
      text-align: center;
      width: 100%; }
    .single-image .flickity-slider > *, .single-image .flickity-slider > * figure {
      width: 100%; }
    .single-image .flickity-slider > * img {
      width: auto; }
  .single-image .flickity-page-dots {
    background: #000;
    margin: 0;
    padding: 0;
    left: 0;
    top: 100%;
    padding: 0;
    height: 2em;
    display: flex;
    align-items: center;
    justify-content: center; }
    .single-image .flickity-page-dots .dot {
      opacity: 1; }
      .single-image .flickity-page-dots .dot.is-selected {
        background: #fff; }

/*	HACKS FOR THIS SITE */
.section--coaches td {
  font-size: 1.2em;
  margin-bottom: 0;
  display: block;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .section--coaches td {
      display: table-cell;
      border-bottom: 1px solid #fff;
      padding: 0.4em 2em;
      padding-left: 0; } }
.section--coaches tr {
  display: block;
  margin-bottom: 0.8em;
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/ }
  @media screen and (min-width: 50em) {
    .section--coaches tr {
      display: table-row;
      margin-bottom: 0; } }
.section--coaches a {
  font-variation-settings: 'wght' 600; }

.section--coaches .section__content {
  margin: 0 auto;
  width: fit-content; }

.link--video {
  font-variation-settings: 'wght' 660;
  margin-left: 2.3em;
  position: relative; }
  .link--video:before {
    position: absolute;
    content: '';
    background-image: url(../images/play-btn.png);
    background-size: cover;
    width: 2em;
    height: 2em;
    top: -0.3em;
    left: -2.3em; }
  .link--video:hover {
    cursor: pointer; }

.btn {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght";
  text-transform: uppercase;
  letter-spacing: 0.1em;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  transition: 0.4s all ease;
  background: #861F41;
  color: #fff;
  border-radius: 1em;
  padding: 0.4em 1em; }
  @media screen and (min-width: 30em) {
    .btn {
      font-variation-settings: 340; } }
  .btn:hover {
    background: #000;
    color: #fff;
    cursor: pointer; }

.btn--frame {
  background: #fff;
  display: inline-block;
  padding: 1em 1.4em;
  border: 1px solid #f00;
  position: relative;
  z-index: 3; }
  .btn--frame, .btn--frame:before, .btn--frame:after {
    transition: 0.2s all ease; }
  .btn--frame:before, .btn--frame:after {
    z-index: 1;
    position: absolute;
    content: "";
    border: 1px solid #f00; }
  .btn--frame:before {
    top: 100%;
    left: calc(0.5em / 2);
    height: 0.5em;
    width: 100%;
    transform: skew(45deg); }
  .btn--frame:after {
    top: 0.5em;
    top: calc(0.5em / 2);
    right: -1.15em;
    right: calc((0.5em) * -1.3);
    height: 100%;
    width: 0.5em;
    transform: skew(0, 45deg); }
  .btn--frame:hover {
    margin-top: 0.25em;
    margin-left: 0.25em;
    background: #fff;
    display: inline-block;
    padding: 1em 1.4em;
    border: 1px solid #f00;
    position: relative;
    z-index: 3; }
    .btn--frame:hover:before, .btn--frame:hover:after {
      z-index: 1;
      position: absolute;
      content: "";
      border: 1px solid #f00; }
    .btn--frame:hover:before {
      top: 100%;
      left: calc(0.25em / 2);
      height: 0.25em;
      width: 100%;
      transform: skew(45deg); }
    .btn--frame:hover:after {
      top: 0.095em;
      right: calc((0.25em) * -1.5);
      height: 100%;
      width: 0.25em;
      transform: skew(0, 45deg); }
  .btn--frame:active {
    margin-top: 0.5em;
    margin-left: 0.5em; }
    .btn--frame:active:before {
      height: 0;
      top: 100%;
      left: 0;
      opacity: 0; }
    .btn--frame:active:after {
      width: 0;
      right: 0;
      top: 0;
      opacity: 0; }

@keyframes wipe-in {
  from {
    clip-path: inset(0 100% 0 0); }
  to {
    clip-path: inset(0 0 0 0); } }

@keyframes shift-in-from-right {
  from {
    opacity: 0;
    transform: translateX(1em); }
  to {
    opacity: 1;
    transform: translateX(0); } }

.loaded .section.animate-this {
  /*
	animation-name: fade-in;
	animation-duration: 1s;
	animation-timing-function: linear;
	animation-fill-mode: forwards;	
*/ }
  .loaded .section.animate-this .section__content {
    opacity: 0; }

.loaded .section.top-66pfrom-topOfWindow {
  opacity: 1; }
  .loaded .section.top-66pfrom-topOfWindow h2 {
    /*				animation-name: wipe-in;
				animation-fill-mode: forwards;
				animation-duration: 1s; */ }
  .loaded .section.top-66pfrom-topOfWindow .section__content {
    animation-delay: 0.4s;
    animation-name: zoom-in;
    animation-fill-mode: forwards;
    animation-duration: 1s; }

.musicbox {
  text-align: center;
  max-width: 20em;
  margin: 8em auto 0 auto; }

.musicbox__text {
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 360;
  line-height: 1.3;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  margin-top: 0.8em; }
  @media screen and (min-width: 30em) {
    .musicbox__text {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .musicbox__text {
      font-size: 0.8em; } }
.play_btn {
  display: block;
  background-color: #000;
  background-size: 80%;
  background-repeat: no-repeat;
  background-position: center center;
  width: 2em;
  height: 2em;
  margin-bottom: 0.8em;
  color: transparent;
  padding: 1.8em;
  border: 0.8em solid #000;
  border-radius: 50%;
  margin: 0 auto;
  -webkit-appearance: none; }

.play_btn.paused {
  background-image: url(/2024/assets/images/soundtrack-icon-off.png); }

.play_btn.playing {
  background-image: url(/2024/assets/images/soundtrack-icon-on.png); }

.image-video-link {
  border: 1px solid #fff !important;
  display: block;
  border-radius: 0.8em;
  overflow: hidden;
  position: relative;
  transition: 0.4s all ease;
  box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.3); }
  .image-video-link:hover {
    cursor: pointer;
    transform: scale(1.02);
    box-shadow: 0 0.3em 0.4em rgba(0, 0, 0, 0.3); }
    .image-video-link:hover .image-link-caption {
      background: #fff;
      color: #000; }

.image-link-caption {
  transition: 0.4s all ease;
  position: absolute;
  z-index: 10;
  left: 0.2em;
  bottom: 0.2em;
  background: #000;
  color: #fff;
  border-radius: 0.7em;
  padding: 0.1em 0.5em;
  font-family: "Source Sans Variable";
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1em;
  font-variation-settings: "wght" 640;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }
  @media screen and (min-width: 30em) {
    .image-link-caption {
      font-size: 1em; } }
  @media screen and (min-width: 50em) {
    .image-link-caption {
      font-size: 0.8em; } }
  .image-link-caption:before {
    content: "\25B6 ";
    margin-right: 0.4em; }

.section__inner {
  margin-top: 3em; }

.section h3 {
  margin-top: 0; }

.section--cover-img {
  padding-top: 0;
  min-height: inherit; }

@media screen and (min-width: 50em) {
  .ceremony h2 {
    font-size: 2.4em;
    margin-top: 2em; } }

.section.order-of-exercises h2:not(.no-border):before {
  border-top: none; }

.order-of-exercises .event__content {
  margin-bottom: 4em; }

.order-of-exercises .event__content {
  text-align: center; }

.order-of-exercises h2.event__title {
  font-size: 1.6em;
  margin-bottom: 0;
  padding-bottom: .25em;
  line-height: 1;
  color: #951829;
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  font-weight: bold;
  letter-spacing: 0.02em;
  line-height: 1.1;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.order-of-exercises img {
  height: auto;
  margin-bottom: .75em; }

.weekend .event {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin-bottom: 5%; }

.weekend .event__content {
  width: 100%; }

.weekend h4.event__title {
  font-size: 1.5em;
  margin-bottom: .25em;
  line-height: 1;
  color: #951829;
  font-family: freight-big-pro, serif;
  /*

	
	
	*/
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  font-size: 1.6em;
  font-weight: bold;
  letter-spacing: 0.02em;
  line-height: 1.1;
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
  /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
  /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */ }

.weekend h3.schedule__date {
  margin-bottom: .5em;
  font-size: 1.25em; }

.weekend img {
  height: auto;
  margin-bottom: .75em; }

@media screen and (min-width: 50em) {
  .weekend .event {
    flex-direction: row; }
  .weekend .event__content {
    width: 70%; } }

.virtual-receptions ul {
  list-style: none;
  margin: 5% 0 0 0;
  padding-left: 0; }

.virtual-receptions li {
  padding-bottom: .75em; }

.ceremony.translations .width-xxwide {
  margin-bottom: 0; }

.section.ceremony.translations {
  padding-bottom: 0; }

.section.theme-dark-burgundy.memories {
  background: #641a2b url("../images/program-cover-bg-2.jpg") no-repeat center; }

.ceremony .width-xxwide {
  margin-bottom: 3em; }

.ceremony .intro {
  margin-bottom: 2em;
  text-align: center; }

.ceremony .element .speaker-intro {
  text-align: center;
  margin: 6% 0 12%; }

.ceremony .element .speaker-content {
  display: flex;
  justify-content: space-between;
  margin-top: 5%; }
  .ceremony .element .speaker-content img {
    max-width: 46%;
    height: 100%; }
  .ceremony .element .speaker-content div {
    width: 50%; }

.ceremony .translation-choices {
  display: flex;
  justify-content: center; }
  .ceremony .translation-choices ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    margin: 0 0 1em;
    padding: 0;
    font-size: 90%; }

.ceremony .extra-stuff {
  padding-top: 0; }

.image--diagonal-crop__container {
  transform: skew(0, 6deg);
  overflow: hidden;
  height: 19em;
  margin-top: 2em;
  margin-bottom: 2em; }

.image--diagonal-crop__container img {
  display: block;
  transform: skew(0, -6deg);
  width: 120%;
  margin-top: -10%;
  object-fit: cover; }

body {
  background: #fff url("../images/page-bg.jpg") repeat-y center; }

.conferring-of-degrees .element {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  margin: 10% 0; }

.shape-content {
  position: relative;
  text-align: center;
  z-index: 2;
  color: #fff; }
  .shape-content strong {
    display: block;
    margin-bottom: 5%;
    font-size: 1.75em;
    line-height: 1; }

.parallelogram {
  position: relative;
  width: 100%;
  height: 16em;
  padding: 4em 1em;
  margin-bottom: 5%;
  font-size: 80%; }
  .parallelogram .shape-content {
    color: #fff; }
    .parallelogram .shape-content a:link {
      color: #fff; }
    .parallelogram .shape-content a:visited {
      color: #fff; }
    .parallelogram .shape-content a:hover, .parallelogram .shape-content a:visited:hover, .parallelogram .shape-content a:focus {
      color: #746661; }
    .parallelogram .shape-content a:active, .parallelogram .shape-content a:visited:active {
      color: #641A2B; }

@media screen and (min-width: 31.25em) {
  .parallelogram {
    width: 45%; } }

@media screen and (min-width: 50em) {
  .parallelogram {
    width: 30%; } }

.parallelogram:after {
  content: "";
  top: 0;
  left: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  transform: skewY(15deg);
  background: #951829;
  z-index: 1; }

.list--alpha p {
  text-align: center;
  margin-bottom: 0; }

.alphaList__nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  padding: 0;
  margin: 2em auto 5em; }

.alphaList__nav li {
  list-style: none;
  border: 1px solid #ed1c24;
  margin: 0 .5em .5em 0;
  position: relative;
  font-size: 1em;
  font-weight: bold; }
  .alphaList__nav li a {
    text-decoration: none;
    width: 2em;
    height: 2em;
    display: flex;
    align-items: center;
    justify-content: center; }
    .alphaList__nav li a:link {
      color: #ed1c24; }
    .alphaList__nav li a:visited {
      color: #ed1c24; }
    .alphaList__nav li a:hover, .alphaList__nav li a:visited:hover, .alphaList__nav li a:focus {
      color: #fff; }
    .alphaList__nav li a:active, .alphaList__nav li a:visited:active {
      color: #655656; }
    .alphaList__nav li a:hover {
      background-color: #ed1c24; }

/* @keyframes reveal-if-no-js {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}
.section.animate-this .section__content {
	animation-name: reveal-if-no-js;
	animation-duration: 0.3s;
	animation-fill-mode: forwards;
	animation-delay: 1s;
	opacity: 0;
}
.loading .section.animate-this .section__content {
	animation: none;
    opacity: 0;

} */
/*	CHRIS ADDITIONS
	=============== */
/* @keyframes reveal-if-no-js {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}
.section.animate-this .section__content {
	animation-name: reveal-if-no-js;
	animation-duration: 0.3s;
	animation-fill-mode: forwards;
	animation-delay: 1s;
	opacity: 0;
}
.loading .section.animate-this .section__content {
	animation: none;
    opacity: 0;
} */
@-webkit-keyframes reveal-if-no-js {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

@keyframes reveal-if-no-js {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

.masthead,
.nav,
.section.animate-this .section__content {
  -webkit-animation-name: reveal-if-no-js;
  animation-name: reveal-if-no-js;
  -webkit-animation-duration: 0.3s;
  animation-duration: 0.3s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
  opacity: 0; }

.loading .masthead,
.loading .nav,
.loading .section.animate-this .section__content {
  -webkit-animation: none;
  animation: none;
  opacity: 0; }

.loaded .masthead,
.loaded .nav {
  -webkit-animation: none;
  animation: none;
  opacity: 1; }

/*	Patch to make the loader visible without JS */
@keyframes hide-loader-if-no-js {
  from {
    height: 100%; }
  to {
    height: 0%; } }

.no-js.show-load-screen:before,
.no-js.loading:before,
.no-js.show-load-screen:after,
.no-js.loading:after {
  animation-name: hide-loader-if-no-js;
  animation-duration: 0.01s;
  animation-fill-mode: forwards;
  animation-delay: 0.4s;
  animation-iteration-count: 1; }

.no-js .section__content,
.no-js .masthead,
.no-js .nav {
  animation-name: reveal-if-no-js !important;
  animation-duration: 0.01s !important;
  animation-fill-mode: forwards !important;
  animation-delay: 0.4s !important; }

/*	From Ray */
a.video-tile {
  position: relative; }

a.video-tile:hover {
  color: #aaa !important; }

.ios .bg-image {
  position: absolute; }

details summary::-webkit-details-marker {
  display: none; }

details summary::-moz-details-marker {
  display: none; }

details summary:marker {
  display: none; }

summary::-moz-list-bullet {
  list-style-type: none;
  display: block; }

.section--cover-img .bg-image-wrapper img,
.section--bg-image .bg-image-wrapper img {
  display: none;
  position: absolute; }

.hidden {
  display: none !important;
  visibility: hidden !important; }

@media screen {
  .ac-skipLink,
  .ac-skipLink:active,
  .ac-skipLink:focus {
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px !important;
    padding: 0 !important;
    overflow: hidden;
    position: absolute !important;
    width: 1px !important;
    z-index: 110; } }

@media screen and (min-width: 37.5em) {
  .ac-skipLink:hover {
    background-color: #ff944d !important; }
  .ac-skipLink {
    background-color: #ffda24 !important;
    border: solid .33em #333 !important;
    color: #000 !important;
    transition: none; }
  .ac-skipLink:active,
  .ac-skipLink:focus {
    color: #000;
    clip: auto;
    height: auto !important;
    overflow: visible;
    position: static !important;
    width: auto !important;
    padding: 1em !important;
    position: absolute !important;
    line-height: 1;
    left: 0;
    top: 0;
    width: 50% !important;
    text-align: left; } }

/* HP stuff */
@keyframes reveal-opacity-if-no-js {
  from {
    opacity: 0;
    transform: translate(0); }
  to {
    opacity: 1;
    transform: translate(0); } }

@keyframes reveal-clip-opacity-if-no-js {
  from {
    opacity: 0;
    clip-path: inset(0 100% 0 0);
    transform: translate(0); }
  to {
    opacity: 1;
    clip-path: inset(0 0 0 0);
    transform: translate(0); } }

.no-js .intro {
  animation-name: reveal-clip-opacity-if-no-js !important;
  animation-duration: 0.01s !important;
  animation-fill-mode: forwards !important;
  animation-delay: 0.4s !important; }

.no-js .screen.screen-1,
.no-js .tagline,
.no-js h1 span {
  animation-name: reveal-opacity-if-no-js !important;
  animation-duration: 0.01s !important;
  animation-fill-mode: forwards !important;
  animation-delay: 0.4s !important; }

@keyframes hide-bg-before-cover-appears {
  from {
    opacity: 1;
    height: 100vh; }
  to {
    opacity: 0;
    height: 0; } }

.page--ceremony.js body {
  position: relative; }

.page--ceremony.js body:before {
  opacity: 1;
  content: '';
  position: absolute;
  height: 90vh;
  width: 100vw;
  background: #fff;
  top: 0;
  left: 0;
  -webkit-animation-name: hide-bg-before-cover-appears;
  animation-name: hide-bg-before-cover-appears;
  -webkit-animation-duration: 0.01s;
  animation-duration: 0.01s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-delay: 6s;
  animation-delay: 6s;
  z-index: 2; }

.header-cover {
  z-index: 10;
  min-height: 90vh; }

.header-cover:before {
  background-image: url(../images/ceremony-header-bg.jpg);
  background-size: cover; }

.animation-edge {
  font-size: 2.3em; }

@media only screen and (min-width: 1100px) {
  .animation-edge {
    font-size: 6vw; } }

h1 > b {
  display: block;
  line-height: 0.8; }

.anim-component-edge1 {
  margin-top: 2em; }

.header-cover__container h1 {
  /*    align-items: baseline; 
    padding-left: 1em;*/ }

.page--ceremony h1 {
  text-transform: uppercase;
  font-style: italic;
  letter-spacing: -0.08em; }

.loaded .animate-this {
  opacity: 0; }

.no-js .animate-this {
  opacity: 0;
  animation-name: reveal-opacity-if-no-js !important;
  animation-duration: 0.01s !important;
  animation-fill-mode: forwards !important;
  animation-delay: 0.4s !important; }

.is-safari .header-cover__container h1,
.is-edge .header-cover__container h1 {
  position: absolute; }

.vassar__logo {
  mix-blend-mode: unset; }

.nav__item a:focus {
  color: white;
  mix-blend-mode: overlay;
  transform: scale(0.9); }

.foursquare a:focus {
  transform: scale(1.4) perspective(200px) rotateX(45deg); }

.nav__btn:focus:before {
  transform: scale(1.4) perspective(200px) rotateX(45deg); }

.alphaList__nav li a:focus {
  background-color: #ed1c24; }

/* .is-edge .body:before,
.is-edge .body:after {
	display: none;
}
.is-edge .header-cover__container h1 {
	position: absolute;
} */
.animation-edge {
  padding: 1em; }

.no-js .header-cover,
.no-js .animation-edge > * {
  opacity: 0;
  animation-name: reveal-opacity-if-no-js !important;
  animation-duration: 0.01s !important;
  animation-fill-mode: forwards !important;
  animation-delay: 0.6s !important; }

h1 {
  font-family: freight-big-pro, serif;
  font-size: 3.4em;
  text-align: center;
  margin: 0;
  line-height: 0.9;
  padding-bottom: 0.4em;
  font-size: 2.4em;
  font-style: normal;
  text-transform: none;
  letter-spacing: 0; }

@media screen and (min-width: 30em) {
  h1 {
    font-size: 3.2em; } }

@media screen and (min-width: 50em) {
  h1 {
    font-size: 3.8em; } }

h1:not(.no-border) {
  padding-bottom: 1em;
  position: relative; }

h1:not(.no-border):before {
  bottom: 0.6em;
  border-top: 1px solid #f00;
  content: "";
  left: 30%;
  position: absolute;
  right: 30%; }

.section h1.grad-darkburg-red {
  background: linear-gradient(45deg, #641A2B 0%, #ed1c24 100%);
  -webkit-background-clip: text;
  color: transparent; }
